/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { ElkFactory, ElkFactoryInterface } from "../ElkFactory";
import type { Provider } from "@ethersproject/providers";
import { Contract, Signer, utils } from "ethers";

const _abi = [
  {
    type: "constructor",
    stateMutability: "nonpayable",
    payable: false,
    inputs: [
      {
        type: "address",
        name: "_feeToSetter",
        internalType: "address",
      },
    ],
  },
  {
    type: "event",
    name: "PairCreated",
    inputs: [
      {
        type: "address",
        name: "token0",
        internalType: "address",
        indexed: true,
      },
      {
        type: "address",
        name: "token1",
        internalType: "address",
        indexed: true,
      },
      {
        type: "address",
        name: "pair",
        internalType: "address",
        indexed: false,
      },
      {
        type: "uint256",
        name: "",
        internalType: "uint256",
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: "function",
    stateMutability: "view",
    payable: false,
    outputs: [
      {
        type: "address",
        name: "",
        internalType: "address",
      },
    ],
    name: "allPairs",
    inputs: [
      {
        type: "uint256",
        name: "",
        internalType: "uint256",
      },
    ],
    constant: true,
  },
  {
    type: "function",
    stateMutability: "view",
    payable: false,
    outputs: [
      {
        type: "uint256",
        name: "",
        internalType: "uint256",
      },
    ],
    name: "allPairsLength",
    inputs: [],
    constant: true,
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    payable: false,
    outputs: [
      {
        type: "address",
        name: "pair",
        internalType: "address",
      },
    ],
    name: "createPair",
    inputs: [
      {
        type: "address",
        name: "tokenA",
        internalType: "address",
      },
      {
        type: "address",
        name: "tokenB",
        internalType: "address",
      },
    ],
    constant: false,
  },
  {
    type: "function",
    stateMutability: "view",
    payable: false,
    outputs: [
      {
        type: "address",
        name: "",
        internalType: "address",
      },
    ],
    name: "feeTo",
    inputs: [],
    constant: true,
  },
  {
    type: "function",
    stateMutability: "view",
    payable: false,
    outputs: [
      {
        type: "address",
        name: "",
        internalType: "address",
      },
    ],
    name: "feeToSetter",
    inputs: [],
    constant: true,
  },
  {
    type: "function",
    stateMutability: "view",
    payable: false,
    outputs: [
      {
        type: "address",
        name: "",
        internalType: "address",
      },
    ],
    name: "getPair",
    inputs: [
      {
        type: "address",
        name: "",
        internalType: "address",
      },
      {
        type: "address",
        name: "",
        internalType: "address",
      },
    ],
    constant: true,
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    payable: false,
    outputs: [],
    name: "setFeeTo",
    inputs: [
      {
        type: "address",
        name: "_feeTo",
        internalType: "address",
      },
    ],
    constant: false,
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    payable: false,
    outputs: [],
    name: "setFeeToSetter",
    inputs: [
      {
        type: "address",
        name: "_feeToSetter",
        internalType: "address",
      },
    ],
    constant: false,
  },
];

export class ElkFactory__factory {
  static readonly abi = _abi;
  static createInterface(): ElkFactoryInterface {
    return new utils.Interface(_abi) as ElkFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ElkFactory {
    return new Contract(address, _abi, signerOrProvider) as ElkFactory;
  }
}
